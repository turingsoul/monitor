<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"
       default-lazy-init="true">

    <!-- ======================== FILTER CHAIN ======================= -->
    <!--
        if you wish to use channel security, add "channelProcessingFilter," in
        front of "httpSessionContextIntegrationFilter" in the list below
    -->
    <bean id="filterChainProxy" class="org.springframework.security.util.FilterChainProxy">
        <property name="filterInvocationDefinitionSource">
            <value>
                <![CDATA[CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        PATTERN_TYPE_APACHE_ANT
        /**=securityContextHolderAwareRequestFilter,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor]]>
            </value>
        </property>
    </bean>

    <!-- ======================== AUTHENTICATION ======================= -->
    <bean id="authenticationManager" class="org.springframework.security.providers.ProviderManager">
        <property name="providers">
            <list>
                <ref local="daoAuthenticationProvider"/>
                <ref local="anonymousAuthenticationProvider"/>
            </list>
        </property>
    </bean>

    <!-- start jdbc user role service -->
    <bean id="daoAuthenticationProvider" class="org.springframework.security.providers.dao.DaoAuthenticationProvider">
        <property name="userDetailsService" ref="jdbcUserDetailsService"/>
        <property name="passwordEncoder">
            <bean class="org.springframework.security.providers.encoding.Md5PasswordEncoder"/>
        </property>
        <property name="saltSource">
            <bean class="org.springframework.security.providers.dao.salt.ReflectionSaltSource">
                <property name="userPropertyToUse" value="getUsername" />
            </bean>
        </property>
    </bean>

    <bean id="jdbcUserDetailsService"
          class="com.xdatainsight.monitor.web.http.security.userrole.userdetailsservice.UserRoleDaoUserDetailsService">
        <property name="userRoleDao" ref="IUserRoleDao"/>


        <property name="rolePrefix" value="" />
    </bean>


    <bean id="IUserRoleListService" class="com.xdatainsight.monitor.web.http.security.userrole.userrolelistservice.UserRoleDaoUserRoleListService">
        <property name="userRoleDao" ref="IUserRoleDao" />
    </bean>


    <bean id="userRoleDao" class="com.xdatainsight.monitor.web.http.security.userrole.userroledao.HibernateUserRoleDao">
        <property name="tenantAdminRoleName" value="Administrator"/>
        <property name="singleTenantAdminUserName" value="admin"/>
        <property name="sessionFactory">
            <bean factory-bean="sessionFactoryBuilder" factory-method="getSessionFactory"/>
        </property>
    </bean>

    <bean id="IUserRoleDao" class="com.xdatainsight.monitor.web.http.security.userrole.userroledao.UserRoleDaoTransactionDecorator">
        <property name="userRoleDao" ref="userRoleDao"/>
        <property name="transactionTemplate">
            <bean class="org.springframework.transaction.support.TransactionTemplate">
                <constructor-arg>
                    <bean class="org.springframework.orm.hibernate3.HibernateTransactionManager">
                        <constructor-arg>
                            <bean factory-bean="sessionFactoryBuilder" factory-method="getSessionFactory"/>
                        </constructor-arg>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="sessionFactoryBuilder" class="com.xdatainsight.monitor.hibernate.SpringSessionFactory"/>



    <!-- end jdbc user role service -->

    <bean id="anonymousAuthenticationProvider"
          class="org.springframework.security.providers.anonymous.AnonymousAuthenticationProvider">
        <property name="key" value="foobar"/>
    </bean>

    <!-- Automatically receives AuthenticationEvent messages -->
    <bean id="loggerListener"
          class="org.springframework.security.event.authentication.LoggerListener"/>

    <bean id="basicProcessingFilter" class="org.springframework.security.ui.basicauth.BasicProcessingFilter">
        <property name="authenticationManager">
            <ref local="authenticationManager"/>
        </property>
        <property name="authenticationEntryPoint">
            <ref local="basicProcessingFilterEntryPoint"/>
        </property>
    </bean>

    <bean id="basicProcessingFilterEntryPoint"
          class="org.springframework.security.ui.basicauth.BasicProcessingFilterEntryPoint">
        <property name="realmName" value="etl-monitor Realm"/>
    </bean>

    <!-- custom Pentaho begin -->

    <!-- replaces Spring's default ApplicationEventMulticaster; do not change bean id -->
    <bean id="applicationEventMulticaster"
          class="org.pentaho.platform.engine.security.event.OrderedApplicationEventMulticaster"/>

    <!-- next two beans replace SecurityStartupFilter -->
    <bean class="org.pentaho.platform.engine.security.event.PentahoAuthenticationSuccessListener"/>
    <bean class="org.pentaho.platform.engine.security.event.PentahoSessionStartupAuthenticationSuccessListener"/>


    <bean id="httpSessionPentahoSessionContextIntegrationFilter"
          class="com.xdatainsight.monitor.web.http.filters.HttpSessionPentahoSessionIntegrationFilter"/>

    <!-- custom Pentaho end -->

    <bean id="anonymousProcessingFilter"
          class="org.springframework.security.providers.anonymous.AnonymousProcessingFilter">
        <property name="key" value="foobar"/>
        <property name="userAttribute" value="anonymousUser,Anonymous"/>
    </bean>
    <bean id="httpSessionContextIntegrationFilter"
          class="org.springframework.security.context.HttpSessionContextIntegrationFilter"/>

    <bean id="logoutFilter" class="org.springframework.security.ui.logout.LogoutFilter">
        <constructor-arg value="/index.jsp"/>
        <constructor-arg>
            <list>
                <bean class="com.xdatainsight.monitor.web.http.security.PentahoLogoutHandler"/>
                <bean class="org.springframework.security.ui.logout.SecurityContextLogoutHandler"/>
            </list>
        </constructor-arg>
        <property name="filterProcessesUrl" value="/Logout"/>
    </bean>

    <bean id="securityContextHolderAwareRequestFilter"
          class="org.springframework.security.wrapper.SecurityContextHolderAwareRequestFilter"/>


    <!--
        ===================== HTTP REQUEST SECURITY ====================
    -->
    <bean id="exceptionTranslationFilter" class="org.springframework.security.ui.ExceptionTranslationFilter">
        <property name="authenticationEntryPoint">
            <ref local="authenticationProcessingFilterEntryPoint"/>
        </property>
        <property name="accessDeniedHandler">
            <bean class="org.springframework.security.ui.AccessDeniedHandlerImpl"/>
        </property>
    </bean>


    <bean id="authenticationProcessingFilter"
          class="org.springframework.security.ui.webapp.AuthenticationProcessingFilter">
        <property name="authenticationManager">
            <ref local="authenticationManager"/>
        </property>
        <property name="authenticationFailureUrl" value="/Login?login_error=1"/>
        <property name="defaultTargetUrl" value="/Home"/>
        <property name="filterProcessesUrl" value="/j_spring_security_check"/>
        <property name="targetUrlResolver">
            <bean class="org.springframework.security.ui.TargetUrlResolverImpl">
                <property name="justUseSavedRequestOnGet" value="true"/>
            </bean>
        </property>
    </bean>

    <bean id="authenticationProcessingFilterEntryPoint"
          class="org.springframework.security.ui.webapp.AuthenticationProcessingFilterEntryPoint">
        <property name="loginFormUrl" value="/Login"/>
        <property name="forceHttps" value="false"/>
    </bean>

    <bean id="httpRequestAccessDecisionManager" class="org.springframework.security.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="false"/>
        <property name="decisionVoters">
            <list>
                <ref bean="roleVoter"/>
            </list>
        </property>
    </bean>

    <bean id="roleVoter" class="org.pentaho.platform.engine.security.PentahoSubstringRoleVoter">
        <constructor-arg value=""/>
    </bean>

    <!--
        Note the order that entries are placed against the
        objectDefinitionSource is critical. The FilterSecurityInterceptor will
        work from the top of the list down to the FIRST pattern that matches
        the request URL. Accordingly, you should place MOST SPECIFIC (ie
        a/b/c/d.*) expressions first, with LEAST SPECIFIC (ie a/.*)
        expressions last
    -->
    <bean id="filterInvocationInterceptor"
          class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
        <property name="authenticationManager">
            <ref local="authenticationManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref local="httpRequestAccessDecisionManager"/>
        </property>
        <property name="objectDefinitionSource">
            <value>
                <!--
                    Note - the "=Nobody" below is saying that resource URLs with those
                    patterns not be available through a web call.
                -->
                <![CDATA[
CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
/login.*=Anonymous,Authenticated
/static/login/*.*=Anonymous,Authenticated
/j_spring_security_check.*\Z=Anonymous,Authenticated
\A/logout.*\Z=Anonymous
\A/.*\Z=Authenticated
        ]]>
            </value>
        </property>
    </bean>

    <bean id="defaultRole" class="java.lang.String">
        <constructor-arg value="Authenticated"/>
    </bean>

    <bean id="anonymousRole" class="java.lang.String">
        <constructor-arg value="Anonymous"/>
    </bean>

    <!-- used by ExtraRolesUserRoleListServiceDecorator beans -->
    <bean id="extraRoles" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <ref bean="defaultRole"/>
                <ref bean="anonymousRole"/>
            </list>
        </property>
    </bean>

</beans>